/**
 * 1. Create a node server with 5 steps
 * 1.1. create folder
 * 1.2. npm init -y
 * 1.3. npm i express cors mongodb
	( express for express ,,, 
	cors for Communicate With two different server ,,,
		mongodb for mongodb ,,,
		dotenv for Environment variable 
	)
 * 1.4. "start" : "node index.js",
     // "start-dev" : "nodemon index.js",
 * 1.5. create index.js
 * 1.6. use 5 steps to create a node server
	(
	//
	import this things 
const express = require('express');
const cors = require('cors');
require('dotenv').config();
const port = process.env.PORT || 5000;
const app = express();

//middleware
app.use(cors())
app.use(express.json());  // if we send data of a number to the client site we should send data as json or an object res.send({number}) or [res.json(number)
                                             for use .json we need that middleware ] 
	
 // and create a root route of the server

//it's a good practice to set a root route 
 app.get('/', (req,res)=>{
    res.send('running Server Genius')
})

// create/add listen to find the server
app.listen(port, () => {
    console.log('listening to port' , port);
})


 * 
 * -------------------
 * Create Atlas Account // go to mongodb atlas 
 * -------------------
 * 1. sign up. google access
 * 2. create cluster
 * 3. Create user dbUser and password
 * 4. Network Access --> ip address: allow all 
 * 5. database > Connect > code copy paste in index.js
 * ---------------------
 * CRUD Operation  // src to --- node mongodb crud
 // we need to add connection string then create a connection , to do this , we need uri 
 // click on dataBase -> click on CONNECT -> connect your application 
 // do check it (Include full driver code example) to get full data -> copy it .
 // pest it on server>index.js>under the middleware section 
 //put it on top -> const { MongoClient, ServerApiVersion } = require('mongodb');
 //replce password with password in uri variable line . to get password -> go to database access -> create an user. and copy password and userName
 //then add that info in .env file (for user DB_USER=# , DB_PASS=# )
 //then use the password in uri variable first convert it to tamlate string -> 
 //then -> replce like (const uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASS}@)
 //then log something inside from the -> client.connect fucntion , 
 // ->to be confirm that the server is connectced successfuly . and check it on the server cmd 
 //connection done with the dataBase .
 
 * -------------------
 * 1. node mongodb CRUD > Fundamentals 
 // to load data 
 //(to get data we should find data by
 //go node mongodb crud -> usage-examples/findone or find .
 //then (we get it from dataBase) 
 //remove the part/function(clint.connect)
 //then we do it with the ( async await fucntion )
 //frist we should diclare a fucntion and in the end should call the function  
 
//  async function run(){
//
//  	try{
//			await clint.connect();
//		}
//		finally{
//		
//		}
//  }
//
//  run().catch(console.dir);

//to get collection with clint (do inside try) ,,, await clint.connect();
//then we should found collection 
//(do inside try) const name+Collection = //(find databse in client) client.db('userName').collection('collectionName') name locate in (collections)
// then make a query ,, keep it empty object when need every data.
//as we want all items of collections
// so we should do ->  const cursor = name+Collection.find(query);
// make a variable -> const datasFromDB = await cursor.toArray(); ,,,(cursor will find a pointer of all the data's to convert it to array .toArray() )
//it's time to send the data what is stored in the datasFromDB variable ,, so if we send data we should do --->
//  const query = {};
//	const cursor = NAME+Collection.find(query);
//	const services = await cursor.toArray();
// this part in side a API, that's why we can get the data by calling the endpoint or api  

 //app.get('/allData', async (req, res) => {
 //			const query = {};
 //         const cursor = serviceCollection.find(query);
 //         const services = await cursor.toArray();
 //         res.send(services)
        })
//then fetch('http://yourSite.com/service')

// to get single item by id
// create a api indide try{} we should create a query to proper filtration
// we don't neet to do cursor becouse there is only one item 
// 
// 
// 
 * 2. create async run function
 * ---------------------------------------------
 * Integrate sending data from client to server 
 * ----------------------------------------------

//post a data
//inside of try {}

//app.post('/service', async (req, res) => {
			const newService = req.body;
			
			});
// right here we're gonna send json in res like 
//we need the doc which we want to add by insertOne()
// app.post('/service', async (req, res) => {
				const doc = req.body;
				const result = await serviceCollection.insertOne(doc);
				res.send(result);
				 })
            
 
 
 //in client site
 * 1. Client side: create form
 * 2. on submit get form data and create user object
 //
 //
 //
  const onSubmit = data => {

        const url = `http://localhost:5000/service/`;
        fetch(url, {
            method: "POST",
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(res => res.json())
        .then(result => {
            console.log(result);
        })

    }

// in server site
	post/add data 
        app.post('/service', async (req, res) => {
            const newService = req.body;
            const result = await serviceCollection.insertOne(newService);
            res.send(result);
        })



 * 3. on Server: Create user POST method to receive data on the backend 
 * 4. on client side: set fetch with POST, headers, body
 * 5. Make sure you return a json from the POST API
 * ---------------------------
 * LOAD Data to the client side
 * -------------------------------
 * 1. create get API on the server
 * 2. create a query object
 * 3. collection.find (query)
 * 4. cursor.toArray()
 * 5. return the result
 * 6. from client useEffect and display like you have done before
 *
 *
 * ---------------------------
 * DELETE
 * ---------------------------
 * 
 * 
 // to delete 
 // first we need to create a query and out id in query 


    app.delete('/service/:id' , async(res, res) =>{
        const id = req.params.id; //getting id
        const query = {_id : ObjectId(id)};
        const result = await serviceCollection.deleteOne(query);
        res.send(result);
    })

 // to delete in clint site , 
 // we need to fetch first , 


    const proceed = window.confirm("are you sure ?");
        if(proceed){
            const url = `http://localhost:5000/service/${id}`;
            fetch(url, {
                method: "delete"
            })
            .then(res => res.json())
            .then(data => {
                console.log(data);
                const remaining = services.filter(service => service._id != id)
                setServices(remaining);
            })

 //
 //
 //

** pagination part const pages = [...Array(pageCountOfDB ).keys()]     {{{ Detailed video in module - 67 }}}

 // 1. 
 //

 // 
 // 
 //
 //
 //
 // 

** load data for cart from db  {{{ Detailed video in module - 67 }}}

const useCart = () => {
    const [cart, setCart] = useState([]);
    useEffect(() => {
        const storedCart = getStoredCart();
        const savedCart = [];

        const keys = Object.keys(storedCart);

        fetch('http://localhost:5000/productByKeys', {
            method: "POST",
            headers: {
                'content-type': 'application/json'
            },
            body:  JSON.stringify(keys)
        })
        .then(res => res.json())
        .then(products => {
            console.log(products);
            
        for (const id in storedCart) {
            const addedProduct = products.find(product => product._id === id);
            if (addedProduct) {
                const quantity = storedCart[id];
                addedProduct.quantity = quantity;
                savedCart.push(addedProduct);
            }
        }
        setCart(savedCart);
        })

    }, []);

    return [cart, setCart];

 //then (in server site) we need to load data to keys -> src ( $in mongodb)
 //then diclare a query = { field: { $in: [<value1>, <value2>, ... <valueN> ] } } ->  it's mean , which field you want to find out , there is some obj in data base ,
 // so which property of objects you want to find , put that in place of field . and put all the values in the centerd array [...value] .

 // use post to get products by ids
        app.post('/productByKeys' , async(req, res) => {
            const keys = req.body; // recive clint site ids

            const ids = keys.map(id => ObjectId(id)) // normaly as items of array mongobd can't understand that's why we need to wrap it like this .

            const query = {_id: {$in: ids}} // diclared query.

            const cursor = productCollection.find(query);

            const products = await cursor.toArray();

            res.send(products); // send to clint site
        })


// use this => const [cart, setCart] = useCart(); to get data in every page .  

 




 
*/